/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.4/samples
 */

plugins {
    val kotlinVersion: String = "1.6.10"
    kotlin("jvm") version kotlinVersion
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("com.google.devtools.ksp") version "1.6.10-1.0.2"
}

allprojects {
    apply {
        plugin("org.jetbrains.kotlin.jvm")
        plugin("com.github.johnrengelman.shadow")
        plugin("com.google.devtools.ksp")
    }

    group = "io.github.clayclaw"

    val spigotVersion = "1.18.2-R0.1"

    repositories {
        mavenCentral()
        maven {
            url = uri("https://hub.spigotmc.org/nexus/content/repositories/snapshots/")
        }
        maven {
            url = uri("https://oss.sonatype.org/content/repositories/snapshots")
        }
    }
    dependencies {
        arrayOf("reflect").forEach {
            compileOnly(kotlin(it))
        }

        compileOnly("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0")

        compileOnly("org.spigotmc:spigot-api:${spigotVersion}-SNAPSHOT")

        compileOnly("io.insert-koin:koin-annotations:1.0.0-beta-1")
        compileOnly("io.insert-koin:koin-core:3.2.0-beta-1")

        compileOnly(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar"))))

        ksp("io.insert-koin:koin-ksp-compiler:1.0.0-beta-1")
    }

    sourceSets.main {
        java.srcDirs("build/generated/ksp/main/kotlin")
    }

    val shadowJar = (tasks["shadowJar"] as com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar).apply {
        exclude("kotlin*", "junit*", "org.junit*", "org.hamcrest*", "org.intellij*", "org.jetbrains*")
        //relocate("org.from.package", "org.target.package")
    }

    val sourcesJar by tasks.registering(Jar::class) {
        dependsOn(JavaPlugin.CLASSES_TASK_NAME)
        archiveClassifier.set("sources")
        from(sourceSets.main.get().allSource)
    }

    val jar = (tasks["jar"] as Jar).apply {}

    val deployPlugin by tasks.registering(Copy::class) {
        dependsOn(jar)
        System.getenv("PLUGIN_DEPLOY_PATH")?.let {
            from(jar)
            into(it)
        }
    }

    val build = (tasks["build"] as Task).apply {
        arrayOf(
            sourcesJar
            , shadowJar
            , deployPlugin
        ).forEach { dependsOn(it) }
    }
}